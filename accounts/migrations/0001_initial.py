# Generated by Django 4.2 on 2025-05-28 11:31

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0003_update_article_analysis'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='Email адрес пользователя', max_length=254, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('is_email_verified', models.BooleanField(default=False, help_text='Подтвердил ли пользователь свой email', verbose_name='Email подтвержден')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлен')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название плана')),
                ('slug', models.SlugField(help_text='Уникальный идентификатор плана', unique=True, verbose_name='Slug')),
                ('plan_type', models.CharField(choices=[('free', 'Бесплатный'), ('basic', 'Базовый'), ('premium', 'Премиум'), ('enterprise', 'Корпоративный')], max_length=20, verbose_name='Тип плана')),
                ('description', models.TextField(help_text='Подробное описание возможностей плана', verbose_name='Описание')),
                ('price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Цена')),
                ('billing_period', models.CharField(choices=[('monthly', 'Ежемесячно'), ('yearly', 'Ежегодно'), ('lifetime', 'Пожизненно')], default='monthly', max_length=20, verbose_name='Период оплаты')),
                ('max_api_requests_per_day', models.PositiveIntegerField(default=100, verbose_name='Лимит API запросов в день')),
                ('max_saved_articles', models.PositiveIntegerField(default=50, verbose_name='Лимит сохраненных статей')),
                ('max_custom_sources', models.PositiveIntegerField(default=0, verbose_name='Лимит пользовательских источников')),
                ('headless_parsing_enabled', models.BooleanField(default=False, help_text='Доступ к парсингу SPA сайтов через Playwright', verbose_name='Headless парсинг')),
                ('advanced_analytics', models.BooleanField(default=False, help_text='Доступ к детальной аналитике и экспорту данных', verbose_name='Расширенная аналитика')),
                ('priority_support', models.BooleanField(default=False, verbose_name='Приоритетная поддержка')),
                ('api_access', models.BooleanField(default=False, help_text='Доступ к REST API для интеграций', verbose_name='API доступ')),
                ('is_active', models.BooleanField(default=True, help_text='Доступен ли план для покупки', verbose_name='Активен')),
                ('is_popular', models.BooleanField(default=False, help_text='Отображать как рекомендуемый план', verbose_name='Популярный')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлен')),
            ],
            options={
                'verbose_name': 'План подписки',
                'verbose_name_plural': 'Планы подписки',
                'ordering': ['price'],
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Активна'), ('expired', 'Истекла'), ('cancelled', 'Отменена'), ('pending', 'Ожидает оплаты')], default='pending', max_length=20, verbose_name='Статус')),
                ('start_date', models.DateTimeField(verbose_name='Дата начала')),
                ('end_date', models.DateTimeField(verbose_name='Дата окончания')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Сумма оплаты')),
                ('payment_method', models.CharField(blank=True, max_length=50, verbose_name='Способ оплаты')),
                ('transaction_id', models.CharField(blank=True, max_length=100, verbose_name='ID транзакции')),
                ('auto_renewal', models.BooleanField(default=False, verbose_name='Автопродление')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создана')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлена')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='accounts.subscriptionplan', verbose_name='План подписки')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Подписка пользователя',
                'verbose_name_plural': 'Подписки пользователей',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='Аватар')),
                ('bio', models.TextField(blank=True, help_text='Краткая информация о пользователе', max_length=500, verbose_name='О себе')),
                ('language', models.CharField(choices=[('ru', 'Русский'), ('en', 'English')], default='ru', max_length=2, verbose_name='Язык интерфейса')),
                ('theme', models.CharField(choices=[('light', 'Светлая'), ('dark', 'Темная'), ('auto', 'Автоматически')], default='auto', max_length=5, verbose_name='Тема оформления')),
                ('timezone', models.CharField(default='Europe/Minsk', max_length=50, verbose_name='Часовой пояс')),
                ('email_notifications', models.BooleanField(default=True, help_text='Получать уведомления на email', verbose_name='Email уведомления')),
                ('newsletter_subscription', models.BooleanField(default=False, help_text='Получать еженедельную рассылку с топ новостями', verbose_name='Подписка на рассылку')),
                ('articles_read', models.PositiveIntegerField(default=0, verbose_name='Прочитано статей')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Последняя активность')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлен')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.CreateModel(
            name='UserFavoriteArticle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, help_text='Личные заметки пользователя к статье', verbose_name='Заметки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Добавлена')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='core.article', verbose_name='Статья')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_articles', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Избранная статья',
                'verbose_name_plural': 'Избранные статьи',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserCustomSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название источника')),
                ('url', models.URLField(verbose_name='URL источника')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('status', models.CharField(choices=[('pending', 'Ожидает проверки'), ('approved', 'Одобрен'), ('rejected', 'Отклонен'), ('active', 'Активен'), ('inactive', 'Неактивен')], default='pending', max_length=20, verbose_name='Статус')),
                ('requires_headless', models.BooleanField(default=False, help_text='Нужен ли Playwright для парсинга этого источника', verbose_name='Требует headless парсинг')),
                ('parsing_frequency', models.PositiveIntegerField(default=60, verbose_name='Частота парсинга (мин)')),
                ('admin_notes', models.TextField(blank=True, verbose_name='Заметки администратора')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Дата одобрения')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлен')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_sources', to=settings.AUTH_USER_MODEL, verbose_name='Одобрен администратором')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_sources', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Пользовательский источник',
                'verbose_name_plural': 'Пользовательские источники',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='APIUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(max_length=200, verbose_name='Эндпоинт')),
                ('method', models.CharField(max_length=10, verbose_name='HTTP метод')),
                ('status_code', models.PositiveIntegerField(verbose_name='Код ответа')),
                ('response_time', models.FloatField(verbose_name='Время ответа (сек)')),
                ('ip_address', models.GenericIPAddressField(verbose_name='IP адрес')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время запроса')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_usage', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Лог API',
                'verbose_name_plural': 'Логи API',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['user', 'status'], name='accounts_us_user_id_34686a_idx'),
        ),
        migrations.AddIndex(
            model_name='usersubscription',
            index=models.Index(fields=['end_date'], name='accounts_us_end_dat_2f1ed7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfavoritearticle',
            unique_together={('user', 'article')},
        ),
        migrations.AlterUniqueTogether(
            name='usercustomsource',
            unique_together={('user', 'url')},
        ),
        migrations.AddIndex(
            model_name='apiusagelog',
            index=models.Index(fields=['user', 'created_at'], name='accounts_ap_user_id_bed36f_idx'),
        ),
        migrations.AddIndex(
            model_name='apiusagelog',
            index=models.Index(fields=['created_at'], name='accounts_ap_created_645b74_idx'),
        ),
    ]
