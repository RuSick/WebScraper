from django.contrib import admin
from django.utils.html import format_html
from django.utils import timezone
from .models import Source, Article


@admin.register(Source)
class SourceAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    
    list_display = [
        'name', 'type_badge', 'is_active_badge', 'articles_count', 
        'last_parsed_display', 'created_at'
    ]
    list_filter = ['type', 'is_active', 'created_at']
    search_fields = ['name', 'url', 'description']
    readonly_fields = ['created_at', 'updated_at', 'articles_count']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'url', 'type', 'is_active')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞', {
            'fields': ('description', 'update_frequency')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('articles_count', 'last_parsed'),
            'classes': ('collapse',)
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    actions = ['activate_sources', 'deactivate_sources']

    def type_badge(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–π –±–µ–π–¥–∂ —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        colors = {
            'rss': '#28a745',      # –∑–µ–ª–µ–Ω—ã–π
            'html': '#007bff',     # —Å–∏–Ω–∏–π
            'spa': '#ffc107',      # –∂–µ–ª—Ç—ã–π
            'api': '#6f42c1',      # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'tg': '#17a2b8',       # –≥–æ–ª—É–±–æ–π
        }
        color = colors.get(obj.type, '#6c757d')
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 8px; '
            'border-radius: 3px; font-size: 12px;">{}</span>',
            color, obj.get_type_display()
        )
    type_badge.short_description = '–¢–∏–ø'

    def is_active_badge(self, obj):
        """–ë–µ–π–¥–∂ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        if obj.is_active:
            return format_html(
                '<span style="color: #28a745;">‚úì –ê–∫—Ç–∏–≤–µ–Ω</span>'
            )
        else:
            return format_html(
                '<span style="color: #dc3545;">‚úó –ù–µ–∞–∫—Ç–∏–≤–µ–Ω</span>'
            )
    is_active_badge.short_description = '–°—Ç–∞—Ç—É—Å'

    def last_parsed_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞."""
        if obj.last_parsed:
            now = timezone.now()
            diff = now - obj.last_parsed
            if diff.days > 0:
                return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
            elif diff.seconds > 3600:
                hours = diff.seconds // 3600
                return f"{hours} —á. –Ω–∞–∑–∞–¥"
            elif diff.seconds > 60:
                minutes = diff.seconds // 60
                return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            else:
                return "–¢–æ–ª—å–∫–æ —á—Ç–æ"
        return "–ù–∏–∫–æ–≥–¥–∞"
    last_parsed_display.short_description = '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥'

    def activate_sources(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏."""
        count = queryset.update(is_active=True)
        self.message_user(request, f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
    activate_sources.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"

    def deactivate_sources(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏."""
        count = queryset.update(is_active=False)
        self.message_user(request, f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
    deactivate_sources.short_description = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"


@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–µ–π."""
    
    list_display = [
        'title_short', 'source', 'topic_badge', 'tone_badge', 
        'published_at', 'read_count', 'is_featured_badge'
    ]
    list_filter = [
        'topic', 'tone', 'is_featured', 'is_active', 
        'source', 'published_at', 'created_at'
    ]
    search_fields = ['title', 'content', 'summary']
    readonly_fields = ['created_at', 'updated_at', 'read_count']
    date_hierarchy = 'published_at'
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('title', 'url', 'source', 'published_at')
        }),
        ('–ö–æ–Ω—Ç–µ–Ω—Ç', {
            'fields': ('summary', 'content'),
        }),
        ('–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è', {
            'fields': ('topic', 'tone', 'is_featured', 'is_active')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('read_count',),
            'classes': ('collapse',)
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    actions = ['mark_as_featured', 'unmark_as_featured', 'activate_articles', 'deactivate_articles']

    def title_short(self, obj):
        """–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫."""
        return obj.title[:60] + "..." if len(obj.title) > 60 else obj.title
    title_short.short_description = '–ó–∞–≥–æ–ª–æ–≤–æ–∫'

    def topic_badge(self, obj):
        """–¶–≤–µ—Ç–Ω–æ–π –±–µ–π–¥–∂ —Ç–µ–º—ã."""
        colors = {
            'politics': '#dc3545',      # –∫—Ä–∞—Å–Ω—ã–π
            'business': '#28a745',      # –∑–µ–ª–µ–Ω—ã–π
            'technology': '#007bff',    # —Å–∏–Ω–∏–π
            'sports': '#fd7e14',        # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            'entertainment': '#e83e8c', # —Ä–æ–∑–æ–≤—ã–π
            'science': '#6f42c1',       # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'health': '#20c997',        # –±–∏—Ä—é–∑–æ–≤—ã–π
            'world': '#ffc107',         # –∂–µ–ª—Ç—ã–π
            'society': '#6c757d',       # —Å–µ—Ä—ã–π
            'culture': '#17a2b8',       # –≥–æ–ª—É–±–æ–π
            'other': '#343a40',         # —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π
        }
        color = colors.get(obj.topic, '#6c757d')
        return format_html(
            '<span style="background-color: {}; color: white; padding: 2px 6px; '
            'border-radius: 3px; font-size: 11px;">{}</span>',
            color, obj.get_topic_display()
        )
    topic_badge.short_description = '–¢–µ–º–∞'

    def tone_badge(self, obj):
        """–ë–µ–π–¥–∂ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        colors = {
            'positive': '#28a745',   # –∑–µ–ª–µ–Ω—ã–π
            'neutral': '#6c757d',    # —Å–µ—Ä—ã–π
            'negative': '#dc3545',   # –∫—Ä–∞—Å–Ω—ã–π
        }
        color = colors.get(obj.tone, '#6c757d')
        icons = {
            'positive': 'üòä',
            'neutral': 'üòê',
            'negative': 'üòû',
        }
        icon = icons.get(obj.tone, 'üòê')
        return format_html(
            '<span style="color: {};">{} {}</span>',
            color, icon, obj.get_tone_display()
        )
    tone_badge.short_description = '–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å'

    def is_featured_badge(self, obj):
        """–ë–µ–π–¥–∂ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π —Å—Ç–∞—Ç—å–∏."""
        if obj.is_featured:
            return format_html('<span style="color: #ffc107;">‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è</span>')
        return ""
    is_featured_badge.short_description = '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è'

    def mark_as_featured(self, request, queryset):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ."""
        count = queryset.update(is_featured=True)
        self.message_user(request, f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ {count} —Å—Ç–∞—Ç–µ–π.")
    mark_as_featured.short_description = "–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ"

    def unmark_as_featured(self, request, queryset):
        """–£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö."""
        count = queryset.update(is_featured=False)
        self.message_user(request, f"–£–±—Ä–∞–Ω–æ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö {count} —Å—Ç–∞—Ç–µ–π.")
    unmark_as_featured.short_description = "–£–±—Ä–∞—Ç—å –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö"

    def activate_articles(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏."""
        count = queryset.update(is_active=True)
        self.message_user(request, f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} —Å—Ç–∞—Ç–µ–π.")
    activate_articles.short_description = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏"

    def deactivate_articles(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏."""
        count = queryset.update(is_active=False)
        self.message_user(request, f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} —Å—Ç–∞—Ç–µ–π.")
    deactivate_articles.short_description = "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏"


# –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–¥–º–∏–Ω–∫–∏
admin.site.site_header = "MediaScope - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
admin.site.site_title = "MediaScope"
admin.site.index_title = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π"
