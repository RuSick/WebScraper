"""
Модуль для автоматического анализа текста статей.
Определяет тематику, ключевые слова и географические упоминания.
"""

import re
import logging
from typing import List, Tuple, Dict, Any
from collections import Counter

logger = logging.getLogger(__name__)


class TextAnalyzer:
    """Анализатор текста для определения тематики, тегов и локаций."""
    
    def __init__(self):
        # Словари ключевых слов для определения тематики
        self.topic_keywords = {
            'politics': [
                'политик', 'выборы', 'президент', 'министр', 'правительство', 
                'парламент', 'депутат', 'власть', 'оппозиция', 'партия',
                'голосование', 'референдум', 'законопроект', 'дума', 'совет',
                'мэр', 'губернатор', 'администрация', 'кандидат', 'кампания'
            ],
            'economics': [
                'экономика', 'бюджет', 'налог', 'ввп', 'инфляция', 'банк',
                'кредит', 'инвестиции', 'рынок', 'торговля', 'экспорт',
                'импорт', 'валюта', 'рубль', 'доллар', 'евро', 'цена',
                'стоимость', 'тариф', 'пошлина', 'санкции'
            ],
            'technology': [
                'технология', 'компьютер', 'интернет', 'программа', 'софт',
                'приложение', 'сайт', 'платформа', 'алгоритм', 'данные',
                'цифровой', 'искусственный интеллект', 'роботы', 'автоматизация',
                'стартап', 'it', 'разработка', 'программирование', 'код'
            ],
            'war': [
                'война', 'конфликт', 'военный', 'армия', 'солдат', 'боевые',
                'атака', 'операция', 'фронт', 'обстрел', 'ракета', 'танк',
                'авиация', 'флот', 'оружие', 'защита', 'наступление', 'оборона',
                'мир', 'перемирие', 'украина', 'россия', 'спецоперация'
            ],
            'science': [
                'исследование', 'ученые', 'открытие', 'эксперимент', 'наука',
                'научный', 'лаборатория', 'институт', 'университет', 'диссертация',
                'публикация', 'журнал', 'конференция', 'симпозиум', 'академия'
            ],
            'health': [
                'здоровье', 'медицина', 'врач', 'больница', 'лечение', 'болезнь',
                'вирус', 'вакцина', 'эпидемия', 'пандемия', 'коронавирус',
                'ковид', 'пациент', 'диагноз', 'терапия', 'операция'
            ],
            'sports': [
                'спорт', 'футбол', 'хоккей', 'баскетбол', 'теннис', 'бокс',
                'олимпиада', 'чемпионат', 'турнир', 'матч', 'игра', 'команда',
                'спортсмен', 'тренер', 'стадион', 'соревнование', 'победа'
            ],
            'business': [
                'бизнес', 'компания', 'корпорация', 'предприятие', 'фирма',
                'организация', 'директор', 'менеджер', 'сделка', 'контракт',
                'партнерство', 'слияние', 'поглощение', 'ipo', 'акции'
            ],
            'entertainment': [
                'кино', 'фильм', 'актер', 'режиссер', 'музыка', 'концерт',
                'альбом', 'песня', 'артист', 'театр', 'спектакль', 'шоу',
                'телевидение', 'сериал', 'премьера', 'фестиваль'
            ],
            'culture': [
                'культура', 'искусство', 'музей', 'выставка', 'картина',
                'художник', 'скульптура', 'галерея', 'литература', 'книга',
                'автор', 'писатель', 'поэт', 'библиотека', 'памятник'
            ]
        }
        
        # Географические названия (можно расширить)
        self.locations = [
            # Страны
            'россия', 'украина', 'беларусь', 'казахстан', 'китай', 'сша',
            'германия', 'франция', 'италия', 'япония', 'индия', 'бразилия',
            
            # Города России
            'москва', 'санкт-петербург', 'новосибирск', 'екатеринбург',
            'казань', 'челябинск', 'омск', 'самара', 'ростов-на-дону',
            'уфа', 'красноярск', 'воронеж', 'пермь', 'волгоград',
            
            # Зарубежные города
            'киев', 'минск', 'алматы', 'пекин', 'токио', 'нью-йорк',
            'лондон', 'париж', 'берлин', 'рим', 'мадрид', 'варшава',
            
            # Регионы
            'сибирь', 'урал', 'дальний восток', 'кавказ', 'крым', 'донбасс'
        ]
    
    def analyze_text(self, title: str, content: str = "", summary: str = "") -> Dict[str, Any]:
        """
        Полный анализ текста статьи.
        
        Args:
            title: Заголовок статьи
            content: Полный текст статьи  
            summary: Краткое содержание
            
        Returns:
            Dict с результатами анализа: topic, tags, locations
        """
        # Объединяем весь доступный текст
        full_text = f"{title} {summary} {content}"
        text_lower = full_text.lower()
        
        # Определяем тематику
        topic = self._determine_topic(text_lower)
        
        # Извлекаем ключевые слова
        tags = self._extract_keywords(text_lower, title)
        
        # Находим географические упоминания
        locations = self._find_locations(text_lower)
        
        logger.info(f"Анализ завершен: тема={topic}, тегов={len(tags)}, локаций={len(locations)}")
        
        return {
            'topic': topic,
            'tags': tags,
            'locations': locations
        }
    
    def _determine_topic(self, text: str) -> str:
        """Определяет основную тематику текста."""
        topic_scores = {}
        
        for topic, keywords in self.topic_keywords.items():
            score = 0
            for keyword in keywords:
                # Подсчитываем вхождения ключевых слов
                count = len(re.findall(r'\b' + re.escape(keyword), text))
                score += count
            
            if score > 0:
                topic_scores[topic] = score
        
        if topic_scores:
            # Возвращаем тематику с наибольшим счетом
            best_topic = max(topic_scores, key=topic_scores.get)
            logger.debug(f"Определена тематика: {best_topic} (счет: {topic_scores[best_topic]})")
            return best_topic
        
        return 'other'
    
    def _extract_keywords(self, text: str, title: str) -> List[str]:
        """Извлекает ключевые слова из текста."""
        keywords = set()
        
        # Очищаем текст от знаков препинания
        cleaned_text = re.sub(r'[^\w\s]', ' ', text)
        words = cleaned_text.split()
        
        # Исключаем служебные слова
        stop_words = {
            'это', 'как', 'его', 'что', 'или', 'для', 'при', 'все', 'так',
            'был', 'есть', 'уже', 'еще', 'чем', 'где', 'кто', 'они', 'она',
            'и', 'в', 'на', 'с', 'по', 'к', 'о', 'от', 'до', 'за', 'под',
            'над', 'между', 'через', 'из', 'у', 'а', 'но', 'да', 'же', 'ли',
            'не', 'ни', 'бы', 'вы', 'мы', 'ты', 'он', 'то', 'тот', 'эта'
        }
        
        # Ищем важные слова (длиннее 3 символов, не служебные)
        word_freq = Counter()
        for word in words:
            if (len(word) > 3 and 
                word not in stop_words and 
                word.isalpha()):
                word_freq[word] += 1
        
        # Берем наиболее частые слова
        most_common = word_freq.most_common(10)
        keywords.update([word for word, freq in most_common if freq > 1])
        
        # Добавляем ключевые слова из заголовка
        title_words = re.findall(r'\b\w{4,}\b', title.lower())
        for word in title_words:
            if word not in stop_words and word.isalpha():
                keywords.add(word)
        
        return list(keywords)[:15]  # Ограничиваем количество тегов
    
    def _find_locations(self, text: str) -> List[str]:
        """Находит географические упоминания в тексте."""
        found_locations = []
        
        for location in self.locations:
            # Ищем точные совпадения слов
            pattern = r'\b' + re.escape(location) + r'\b'
            if re.search(pattern, text):
                found_locations.append(location.title())
        
        # Убираем дубликаты и ограничиваем количество
        return list(set(found_locations))[:10]


def analyze_article_content(article) -> Dict[str, Any]:
    """
    Функция для анализа конкретной статьи.
    
    Args:
        article: Экземпляр модели Article
        
    Returns:
        Dict с результатами анализа
    """
    analyzer = TextAnalyzer()
    
    try:
        result = analyzer.analyze_text(
            title=article.title,
            content=article.content,
            summary=article.summary
        )
        
        logger.info(f"Статья '{article.title[:50]}...' проанализирована")
        return result
        
    except Exception as e:
        logger.error(f"Ошибка анализа статьи {article.id}: {e}")
        return {
            'topic': 'other',
            'tags': [],
            'locations': []
        } 