#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
"""
import os
import sys
import django
import asyncio
import logging
from django.utils import timezone

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from core.models import Source, Article
from scraper.parsers.universal_parser import fetch_generic_articles
from asgiref.sync import sync_to_async

async def debug_habr_parsing():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Habr"""
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ Habr...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ Habr
    try:
        habr_source = await sync_to_async(Source.objects.get)(name__icontains="Habr")
        print(f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {habr_source.name}")
        print(f"üîó URL: {habr_source.url}")
        print(f"üìä –¢–∏–ø: {habr_source.type}")
        print(f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {habr_source.is_active}")
    except Source.DoesNotExist:
        print("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ Habr –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    articles = await fetch_generic_articles(habr_source)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
    
    if articles:
        print(f"\nüìù –ü–µ—Ä–≤—ã–µ 3 —Å—Ç–∞—Ç—å–∏:")
        for i, article in enumerate(articles[:3], 1):
            print(f"\n   {i}. –ó–∞–≥–æ–ª–æ–≤–æ–∫: {article['title']}")
            print(f"      URL: {article['url']}")
            print(f"      –ö–æ–Ω—Ç–µ–Ω—Ç: {len(article.get('content', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      Summary: {len(article.get('summary', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"      –î–∞—Ç–∞: {article.get('published_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content = article.get('content', '')
            if content:
                print(f"      –ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content[:100]}...")
    else:
        print("\n‚ö†Ô∏è –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –°–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã")
        print("2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã")
        print("3. –°–∞–π—Ç –∏–∑–º–µ–Ω–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")

async def test_save_to_db():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π
    current_count = await sync_to_async(Article.objects.count)()
    print(f"üìä –°—Ç–∞—Ç–µ–π –≤ –ë–î –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: {current_count}")
    
    # –ü–æ–ª—É—á–∞–µ–º Habr
    habr_source = await sync_to_async(Source.objects.get)(name__icontains="Habr")
    
    # –ü–∞—Ä—Å–∏–º
    articles = await fetch_generic_articles(habr_source)
    
    if articles:
        print(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å {len(articles)} —Å—Ç–∞—Ç–µ–π...")
        saved_count = 0
        
        for article_data in articles:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                existing = await sync_to_async(Article.objects.filter(url=article_data['url']).exists)()
                if existing:
                    print(f"   ‚ö†Ô∏è –°—Ç–∞—Ç—å—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {article_data['title'][:50]}...")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å—é
                article = Article(
                    title=article_data['title'],
                    content=article_data.get('content', ''),
                    summary=article_data.get('summary', ''),
                    url=article_data['url'],
                    source=habr_source,
                    published_at=article_data.get('published_at') or timezone.now(),
                )
                await sync_to_async(article.save)()
                saved_count += 1
                print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {article_data['title'][:50]}...")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö: {saved_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        final_count = await sync_to_async(Article.objects.count)()
        print(f"   –°—Ç–∞—Ç–µ–π –≤ –ë–î –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {final_count}")
        print(f"   –ü—Ä–∏—Ä–æ—Å—Ç: +{final_count - current_count}")
    else:
        print("‚ùå –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

def main():
    print("üîß –û—Ç–ª–∞–¥–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
    asyncio.run(debug_habr_parsing())
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    asyncio.run(test_save_to_db())
    
    print("\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return 0

if __name__ == "__main__":
    sys.exit(main()) 