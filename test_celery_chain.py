#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–¥–∞—á Celery:
parse_source -> save_article -> analyze_article_text
"""

import os
import sys
import django
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from core.models import Source, Article
from scraper.tasks import parse_source
from celery.result import AsyncResult


def test_celery_chain():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –∑–∞–¥–∞—á Celery."""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –∑–∞–¥–∞—á Celery")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    source = Source.objects.filter(is_active=True).first()
    if not source:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"üì∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫: {source.name} (ID: {source.id})")
    print(f"üîó URL: {source.url}")
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    articles_before = Article.objects.count()
    analyzed_before = Article.objects.filter(is_analyzed=True).count()
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {articles_before}")
    print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analyzed_before}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    print(f"\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source.id}...")
    task_result = parse_source.delay(source.id)
    task_id = task_result.id
    
    print(f"üìã Task ID: {task_id}")
    print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    start_time = time.time()
    timeout = 60  # 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    
    while not task_result.ready() and (time.time() - start_time) < timeout:
        print(".", end="", flush=True)
        time.sleep(2)
    
    print()
    
    if task_result.ready():
        result = task_result.result
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status')}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {result.get('found_articles', 0)}")
        print(f"   –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {result.get('scheduled_count', 0)}")
        
        # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞
        print("\n‚è≥ –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ (30 —Å–µ–∫)...")
        time.sleep(30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        articles_after = Article.objects.count()
        analyzed_after = Article.objects.filter(is_analyzed=True).count()
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –ø–∞—Ä—Å–∏–Ω–≥–∞:")
        print(f"   –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {articles_after}")
        print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analyzed_after}")
        print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {articles_after - articles_before}")
        print(f"   –ù–æ–≤—ã—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {analyzed_after - analyzed_before}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        recent_articles = Article.objects.filter(
            source=source
        ).order_by('-created_at')[:3]
        
        if recent_articles:
            print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ {source.name}:")
            for i, article in enumerate(recent_articles, 1):
                status = "‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞" if article.is_analyzed else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞"
                print(f"   {i}. {article.title[:60]}...")
                print(f"      {status}")
                if article.is_analyzed and article.tags:
                    tags = article.tags[:3] if len(article.tags) > 3 else article.tags
                    print(f"      –¢–µ–≥–∏: {', '.join(tags)}")
                print()
        
        print("üéâ –¢–µ—Å—Ç —Ü–µ–ø–æ—á–∫–∏ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüí° –¶–µ–ø–æ—á–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:")
        print("   1. parse_source() - –ø–∞—Ä—Å–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç–∞—Ç—å–∏")
        print("   2. save_article() - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é –≤ –ë–î")
        print("   3. analyze_article_text() - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏")
        print("   –ö–∞–∂–¥—ã–π —à–∞–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π!")
        
    else:
        print("‚ùå –¢–∞–π–º–∞—É—Ç! –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 60 —Å–µ–∫—É–Ω–¥")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")


if __name__ == "__main__":
    test_celery_chain() 