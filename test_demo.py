#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ MediaScope API
"""

import requests
import time

def test_demo():
    base_url = "http://localhost:8000"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MediaScope Demo...")
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    time.sleep(3)
    
    try:
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        print("üìÑ –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        response = requests.get(f"{base_url}/")
        assert response.status_code == 200
        assert "MediaScope" in response.text
        print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç API —Å—Ç–∞—Ç–µ–π
        print("üì∞ –¢–µ—Å—Ç API —Å—Ç–∞—Ç–µ–π...")
        response = requests.get(f"{base_url}/api/articles/")
        assert response.status_code == 200
        data = response.json()
        assert "results" in data
        print(f"‚úÖ API —Å—Ç–∞—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ {data.get('count', 0)} —Å—Ç–∞—Ç–µ–π")
        
        # –¢–µ—Å—Ç API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        print("üåê –¢–µ—Å—Ç API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        response = requests.get(f"{base_url}/api/sources/")
        assert response.status_code == 200
        data = response.json()
        print(f"‚úÖ API –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ {len(data.get('results', []))} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("üìä –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        response = requests.get(f"{base_url}/api/stats/articles/")
        assert response.status_code == 200
        data = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç. –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {data.get('total_articles', 0)}")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        print("üîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞...")
        response = requests.get(f"{base_url}/api/articles/?search=—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
        assert response.status_code == 200
        data = response.json()
        print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ: {len(data.get('results', []))} —Å—Ç–∞—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'")
        
        # –¢–µ—Å—Ç Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        print("üìö –¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        response = requests.get(f"{base_url}/api/docs/")
        assert response.status_code == 200
        print("‚úÖ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üåê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞: {base_url}/")
        print(f"üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {base_url}/api/docs/")
        print(f"‚öôÔ∏è  –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: {base_url}/admin/")
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py runserver")
        return False
    except AssertionError as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    test_demo() 