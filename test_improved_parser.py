#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
"""
import os
import sys
import django
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from core.models import Source
from scraper.parsers.universal_parser import fetch_generic_articles
from asgiref.sync import sync_to_async

async def test_habr_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Habr —Å –Ω–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ Habr...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ Habr –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    try:
        habr_source = await sync_to_async(Source.objects.get)(name__icontains="Habr")
        print(f"üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫: {habr_source.name} ({habr_source.url})")
    except Source.DoesNotExist:
        print("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ Habr –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    print("üîÑ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    articles = await fetch_generic_articles(habr_source)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
    
    if articles:
        print(f"\nüìù –ü–µ—Ä–≤—ã–µ 5 —Å—Ç–∞—Ç–µ–π:")
        for i, article in enumerate(articles[:5], 1):
            print(f"   {i}. {article['title'][:60]}...")
            print(f"      URL: {article['url'][:80]}...")
            print(f"      –ö–æ–Ω—Ç–µ–Ω—Ç: {len(article.get('content', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print()
    else:
        print("‚ö†Ô∏è –°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –°–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏")
        print("   - –°–∞–π—Ç –∏–∑–º–µ–Ω–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
    bad_articles = []
    for article in articles:
        title = article.get('title', '')
        url = article.get('url', '')
        content = article.get('content', '')
        
        if '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏' in title.lower() or 'comments' in url.lower():
            bad_articles.append(article)
    
    if bad_articles:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(bad_articles)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π:")
        for article in bad_articles[:3]:
            print(f"   - {article['title'][:50]}... ({article['url'][:60]}...)")
    else:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

def main():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    asyncio.run(test_habr_parsing())
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return 0

if __name__ == "__main__":
    sys.exit(main()) 